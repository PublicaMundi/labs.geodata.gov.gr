---

 - debug: var=networking
 
 # Perform sanity checks
 
 - name: Check facts about present network interfaces
   assert:
     that:
     - not networking.if.public_ipv4.iface or (networking.if.public_ipv4.iface == ansible_default_ipv4.interface)
     - networking.if.public_ipv6.iface == ansible_default_ipv6.interface
     - networking.if.internal_ipv4.address
 
 - set_fact:
     internal_ipv4_cidr_network: '{{networking.if.internal_ipv4.network| ipv4_to_cidr(netmask=networking.if.internal_ipv4.netmask)}}'
 
 - name: Check that given IPv4 address belongs to the internal network
   assert:
     that:
     - networking.if.internal_ipv4.address| ipv4_in_cidr(internal_ipv4_cidr_network)

 # Configure interfaces
 
 - name: Manage /etc/resolv.conf with resolvconf
   apt: pkg=resolvconf state=latest

 - name: Configure network interfaces
   template: src=etc/network/interfaces dest=/etc/network/interfaces
   notify: ['reboot']

 # Provide site-local aliases for internal hosts

 - name: Generate /etc/hosts
   template: src=etc/hosts dest=/etc/hosts

 # Setup iptables-based firewall

 - include: setup-firewall.yml
 
 # Configure SSH server

 - include: configure-sshd.yml
 
 # Configure kernel-level network parameters

 - name: Enable IPv4 packet forwarding
   sysctl: name=net.ipv4.ip_forward value=1 reload=yes
   when: networking.forward_ipv4
 
 - name: Enable IPv6 packet forwarding
   sysctl: name=net.ipv6.conf.all.forwarding value=1 reload=yes
   when: networking.forward_ipv6

 # Disable network-manager

 - name: Disable network-manager service
   service: name=network-manager enabled=no
   notify: ['reboot']

