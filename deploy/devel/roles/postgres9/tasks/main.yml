---

  - debug: var=postgres
  
  #
  # Install APT packages
  #

  - include: install-packages.yml
  
  #
  # Provide basic configuration
  #

  - name: Create conf.d-like directory
    file: path=/etc/postgresql/{{postgres.version}}/main/conf.d state=directory owner=postgres group=postgres mode=0775
  
  - name: Determine where the data directory for the main cluster
    shell: pg_lsclusters --no-header| grep -e '^{{postgres.version}}'| cut -f 6 -d ' '
    register: pg_lsclusters_result

  - set_fact:
      data_directory: '{{pg_lsclusters_result.stdout}}'
  - debug: var=data_directory

  - name: Generate a simple configuration at postgresql.conf
    template: src=etc/postgresql/postgresql.conf dest=/etc/postgresql/{{postgres.version}}/main/postgresql.conf owner=postgres group=postgres backup=yes
    notify: [restart-postgresql]
    
  - name: Generate a customized configuration at postgresql-tuned.conf
    shell: cd /etc/postgresql/{{postgres.version}}/main/ && pgtune -o postgresql-tuned.conf -i postgresql.conf
    sudo: yes
    sudo_user: postgres
    when: postgres.pgtune

  - name: Override with the tuned version of postgresql.conf
    file: path=/etc/postgresql/{{postgres.version}}/main/postgresql.conf src=postgresql-tuned.conf state=link force=yes
    when: postgres.pgtune
    notify: [restart-postgresql]
    
  #
  # Create database users 
  #
 
  - shell: psql -t -A -F ',' -c '\du'| awk -F ',' -- '{print $1}' 
    sudo: yes
    sudo_user: postgres
    register: psql_du_result
  
  - set_fact:
      existing_users: '{{psql_du_result.stdout_lines}}'
      requested_users: '{{postgres.users| map(attribute="name")| list}}'
  #- debug: var=existing_users

  - name: Create database users
    command: psql -c 'CREATE USER "{{item.name}}" WITH {{item.options| default(["LOGIN"])| join(" ")}}'
    sudo: yes
    sudo_user: postgres
    with_items: postgres.users
    when: not item.name in existing_users

  - set_fact:
      secrets_file: secrets # relative to files

  - name: Set user passwords
    shell: psql -c '{{item}}'
    sudo: yes
    sudo_user: postgres
    with_lines:
    - awk -v users={{requested_users| join(",")}} -f scripts/gen-alter-role.awk -- {{secrets_file}}

  - name: Generate pg_hba.conf rules
    template: src=etc/postgresql/pg_hba.conf dest=/etc/postgresql/{{postgres.version}}/main/pg_hba.conf backup=yes
    notify: [restart-postgresql]
    
  #
  # Create additional tablespaces
  #
  
  - shell: psql -t -A -F ',' -c '\db'| awk -F ',' -- '{print $1}' 
    sudo: yes
    sudo_user: postgres
    register: psql_db_result

  - set_fact:
      existing_tablespaces: '{{psql_db_result.stdout_lines| difference(["pg_default", "pg_global"])}}'
  #- debug: var=existing_tablespaces
  
  - name: Create directory structure for tablespace(s)
    file: path={{item.path}} state=directory owner=postgres group=postgres mode=0755
    with_items: postgres.tablespaces

  - name: Create tablespaces
    command: psql -c "CREATE TABLESPACE {{item.name}} LOCATION '{{item.path}}'" 
    sudo: yes
    sudo_user: postgres
    with_items: postgres.tablespaces
    when: not item.name in existing_tablespaces
   
  #
  # Create databases
  # 
 
  - shell: psql -A -F ',' -R '$' -t -c '\l'| awk -F ',' -v 'RS=$' -- '{print $1}'
    sudo: yes
    sudo_user: postgres
    register: psql_l_result
  
  - set_fact:
      existing_databases: '{{psql_l_result.stdout_lines}}'
  - debug: var=existing_databases
 
  - name: Create databases
    command: psql -c 'CREATE DATABASE {{item.name}} OWNER "{{item.owner}}" TABLESPACE {{item.tablespace| default("DEFAULT")}}' 
    sudo: yes
    sudo_user: postgres
    with_items: postgres.databases
    when: item.name not in existing_databases

  - name: Load extensions into databases
    command: psql -c 'CREATE EXTENSION IF NOT EXISTS {{item.1}}' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist: 
    - postgres.databases
    - extensions 
    when: item.0.name not in existing_databases

  # Todo: Is there a better way to do this? 
  # The previous CREATE-EXTENSION statements leaves postgis-related tables unusable 
  # for the database owner.
  - name: Fix postgis permissions for owner
    command: psql -c 'ALTER TABLE {{item.1}} OWNER TO "{{item.0.owner}}"' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_nested:
    - postgres.databases
    - ['spatial_ref_sys', 'geometry_columns']
    when: '{{"postgis" in item.0.extensions}}'

 #
 # Define default privileges
 # Note: This must be done before creating any objects inside the databases!
 #

  - name: Grant default read priviledges to entire schemata
    command: psql -c 'ALTER DEFAULT PRIVILEGES FOR ROLE "{{item.0.owner}}" IN SCHEMA public GRANT SELECT ON TABLES TO "{{item.1}}"' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist:
    - postgres.databases
    - readers

  - name: Grant default read/write priviledges to entire schemata
    command: psql -c 'ALTER DEFAULT PRIVILEGES FOR ROLE "{{item.0.owner}}" IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE, TRUNCATE ON TABLES TO "{{item.1}}"' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist:
    - postgres.databases
    - writers

  #
  # Initialize databases running custom (DDL?) SQL scripts 
  #

  - name: Copy init scripts to target machine
    copy: src={{item.1}} dest=/tmp/{{(item.0.name ~ '$' ~ item.1)| md5}}.sql owner=postgres
    with_subelements_if_exist: 
    - postgres.databases
    - initialize 

  - name: Source init scripts into target database
    command: psql -a -1 -f /tmp/{{(item.0.name ~ '$' ~ item.1)| md5}}.sql {{item.0.name}}
    sudo: yes
    sudo_user: postgres
    with_subelements_if_exist: 
    - postgres.databases
    - initialize
