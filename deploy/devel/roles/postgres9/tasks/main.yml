---

#  - debug: var=postgres
  
  #
  # Install APT packages
  #

  - name: Trust key for PostgreSQL APT repos
    apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present

  - name: Add PostgreSQL APT repos
    copy: src=etc/apt/sources.list.d/pgdg.list dest=/etc/apt/sources.list.d/pgdg.list

  - name: Update APT index
    apt: update_cache=yes
  
  - name: Install basic utilities
    apt: pkg={{item}} state=latest
    with_items:
    - python

  - name: Install PostgreSQL APT packages
    apt: pkg={{item}} state=latest
    with_items:
    - postgresql-{{postgres.version}}
    - postgresql-contrib-{{postgres.version}}
    - libpq-dev
    - python-psycopg2
    #- pgtune
 
  - name: Install PostGIS APT packages
    apt: pkg={{item}} state=latest
    with_items:
    - postgresql-{{postgres.version}}-postgis-{{postgis.version}}
    when: '{{postgis.version}}'

  
  #
  # Configure PostgreSQL
  #
  
  # Todo: Tune (e.g. by pgtune ??)

  - name: Create conf.d-like directory
    file: path=/etc/postgresql/{{postgres.version}}/main/conf.d state=directory owner=root group=postgres mode=0775
  
  - name: Determine where the data directory for the main cluster
    shell: pg_lsclusters --no-header| grep -e '^{{postgres.version}}'| cut -f 6 -d ' '
    register: pg_lsclusters_result

  - set_fact:
      data_directory: '{{pg_lsclusters_result.stdout}}'
  - debug: var=data_directory

  - name: Generate main configuration at postgresql.conf
    template: src=etc/postgresql/postgresql.conf dest=/etc/postgresql/{{postgres.version}}/main/postgresql.conf backup=yes
    notify: [restart-postgresql]
    
  #
  # Create database users 
  #
 
  - shell: psql -t -A -F ',' -c '\du'| awk -F ',' -- '{print $1}' 
    sudo: yes
    sudo_user: postgres
    register: psql_du_result
  
  - set_fact:
      existing_users: '{{psql_du_result.stdout_lines}}'
  #- debug: var=existing_users

  - name: Create database users
    command: psql -c 'CREATE USER "{{item.name}}" WITH {{item["options"]| default(["LOGIN"])| join(" ")}}'
    sudo: yes
    sudo_user: postgres
    with_items: postgres.users
    when: '{{not item.name in existing_users}}'

  - set_fact:
      secrets_file: secrets # relative to files

  - name: Set user passwords
    shell: echo '{{item}}'| awk -F ':' '{printf("ALTER ROLE \x22%s\x22 PASSWORD \x27%s\x27\n", $1, $2)}'| psql
    sudo: yes
    sudo_user: postgres
    with_lines:
    - cat {{secrets_file}}

  - name: Generate pg_hba.conf rules
    template: src=etc/postgresql/pg_hba.conf dest=/etc/postgresql/{{postgres.version}}/main/pg_hba.conf backup=yes
    notify: [restart-postgresql]
    
  #
  # Create additional tablespaces
  #
  
  - shell: psql -t -A -F ',' -c '\db'| awk -F ',' -- '{print $1}' 
    sudo: yes
    sudo_user: postgres
    register: psql_db_result

  - set_fact:
      existing_tablespaces: '{{psql_db_result.stdout_lines| difference(["pg_default", "pg_global"])}}'
  #- debug: var=existing_tablespaces
  
  - name: Create directory structure for tablespace(s)
    file: path={{item.path}} state=directory owner=postgres group=postgres mode=0755
    with_items: postgres.tablespaces

  - name: Create tablespaces
    command: psql -c "CREATE TABLESPACE {{item.name}} LOCATION '{{item.path}}'" 
    sudo: yes
    sudo_user: postgres
    with_items: postgres.tablespaces
    when: '{{not item.name in existing_tablespaces}}'
   
  #
  # Create databases
  # 
 
  - shell: psql -A -F ',' -R '$' -t -c '\l'| awk -F ',' -v 'RS=$' -- '{print $1}'
    sudo: yes
    sudo_user: postgres
    register: psql_l_result
  
  - set_fact:
      existing_databases: '{{psql_l_result.stdout_lines}}'
  - debug: var=existing_databases
 
  - name: Create databases
    command: psql -c 'CREATE DATABASE {{item.name}} OWNER "{{item.owner}}" TABLESPACE {{item["tablespace"]| default("DEFAULT")}}' 
    sudo: yes
    sudo_user: postgres
    with_items: postgres.databases
    when: '{{item.name not in existing_databases}}'

  - name: Load extensions into databases
    command: psql -c 'CREATE EXTENSION IF NOT EXISTS {{item.1}}' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_subelements: 
    - postgres.databases
    - extensions 
    when: '{{item.0.name not in existing_databases}}'

  # Todo: Is there a better way to do this? 
  # The previous CREATE-EXTENSION statement leaves postgis-related tables unusable 
  # for the database owner.
  - name: Fix postgis permissions for owner
    command: psql -c 'ALTER TABLE {{item.1}} OWNER TO "{{item.0.owner}}"' '{{item.0.name}}'
    sudo: yes
    sudo_user: postgres
    with_nested:
    - postgres.databases
    - ['spatial_ref_sys', 'geometry_columns']
    when: '{{"postgis" in item.0.extensions}}'

