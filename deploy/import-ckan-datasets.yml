---

#
# Import datasets from XML metadata
#

- hosts: ckan
  remote_user: root
  
  tasks:
  
  - name: Find api-key for administrative user
    sudo: yes
    sudo_user: ckaner
    shell: >
      (. '{{ckan.pyenv_dir}}/bin/activate' && paster user -c 'config.ini' admin)|
      grep -e '^<User '| grep -P -o -e '(?<=apikey=)([\w]+([-\w]+)*)'
    args:
      chdir: '{{ckan.pyenv_dir}}/src/ckan'
    register: grep_result

  # FIXME: Compute at the end of CKAN role
  - set_fact: 
      ckan_api_key: '{{grep_result.stdout}}'
  - set_fact:
      ckan_url: 'http://{{inventory_hostname}}'

  - name: The web folder containing our datasets should be accessible
    get_url: url={{web_folder}} dest=/tmp/index-datasets.html

- hosts: admin
  connection: local

  tasks:

  - set_fact:
      ckan_host: '{{groups["ckan"]| first}}'
  - set_fact: 
      api_key: '{{hostvars[ckan_host].ckan_api_key}}'
      api_url: '{{hostvars[ckan_host].ckan_url}}/api/action'

  - file: path=/tmp/import-ckan-datasets state=directory
  
  # Import datasets

  #- pause:
  
  - name: Prepare CKAN API requests for importing datasets
    command: >
      python prepare-api-request-for-datasets.py --web-folder {{web_folder}} dataset-organization.csv
    args:
      chdir: files/groups/ckan/initialize
    register: prepare_datasets_result
  
  - debug: var=prepare_datasets_result.stdout
  
  - name: Import datasets into CKAN
    shell: >
      curl -s -X POST '{{api_url}}/dataset_import' -d '@{{item.path}}' -H 'Content-Type: application/json' -H 'Authorization: {{api_key}}'|
      jq '{success: .success, error: .error, result: .result}'
    with_items: prepare_datasets_result.stdout
    register: import_datasets_result
    tags: ['datasets']

  - set_fact:  
      results: '{{import_datasets_result.results| to_map("item.name")| map_keys("*", "{0}.stdout", decode_json=1)}}'
    tags: ['datasets']
  - copy: 
      content: '{{results}}' 
      dest: /tmp/import-ckan-datasets/results.dataset-import.json
    tags: ['datasets']

  # Add datasets into topics (groups)
  
  #- pause:

  - name: Prepare CKAN API requests for adding datasets to topics
    command: >
      python prepare-api-request-for-dataset-topics.py --folder {{folder}} topics.csv dataset-organization.csv
    args:
      chdir: files/groups/ckan/initialize
    register: prepare_dataset_topics_result

  - debug: var=prepare_dataset_topics_result.stdout

  - name: Add datasets in topics
    shell: >
      curl -s -X POST '{{api_url}}/member_create' -d '@{{item.path}}' -H 'Content-Type: application/json' -H 'Authorization: {{api_key}}'|
      jq '{success: .success, error: .error, result: .result}'
    with_items: prepare_dataset_topics_result.stdout
    register: dataset_topics_result
    tags: ['topics']
   
  - set_fact:  
      results: '{{dataset_topics_result.results| map(attribute="stdout")| map("from_json")| list}}'
    tags: ['topics']
  - copy: 
      content: '{{dict(results=results)}}' 
      dest: /tmp/import-ckan-datasets/results.member-create.json
    tags: ['topics']

  # Create resources
  
  - name: Prepare CKAN API requests for creating resources
    command: >
      python prepare-api-request-for-resources.py -b resources resources.csv
    args:
      chdir: files/groups/ckan/initialize
    register: prepare_resources_result

  - debug: var=prepare_resources_result.stdout

  - name: Gather sha1 digests for imported datasets
    shell: >
      curl -s -X GET '{{api_url}}/package_show?id={{item}}' -H 'Authorization: {{api_key}}'|
      jq '.result.resources| map(.hash)'
    with_items: '{{prepare_datasets_result.stdout| from_json| map(attribute="name")| list}}'
    register: existing_resources_result
    tags: ['resources']
  - debug: var=existing_resources_result
   
  - set_fact:
      existing_resources: '{{existing_resources_result.results| to_map("item")| map_keys("*", "{0}.stdout", decode_json=1)}}'
    tags: ['resources']
  - debug: var=existing_resources
    
  - name: Create resources if not exist
    shell: >
      curl -s -X POST '{{api_url}}/resource_create' -H 'Authorization: {{api_key}}' 
      -F 'package_id={{item.package_id}}' 
      -F 'name={{item.name.decode("unicode-escape")}}' 
      -F 'format={{item.format}}'
      -F 'hash={{item.hash}}' 
      -F 'upload=@{{item.upload}}'|
      jq '{success: .success, error: .error, result: .result}'
    with_items: prepare_resources_result.stdout
    when: '{{item.hash not in existing_resources[item.package_id]}}'
    register: resources_result
    tags: ['resources']
    
  - set_fact:  
      results: '{{resources_result.results| rejectattr("skipped", "defined")| to_map("item.hash")| map_keys("*", "{0}.stdout", decode_json=1)}}'
    tags: ['resources']
  - debug: var=results
  - copy: 
      content: '{{results}}' 
      dest: /tmp/import-ckan-datasets/results.resource-create.json
    tags: ['resources']

