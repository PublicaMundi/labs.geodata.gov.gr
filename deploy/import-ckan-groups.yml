---

#
# Initialize CKAN groups/organizations
#

- hosts: ckan
  remote_user: root
  
  tasks:
  
  - name: Find api-key for administrative user
    sudo: yes
    sudo_user: ckaner
    shell: >
      (. '{{ckan.pyenv_dir}}/bin/activate' && paster user -c 'config.ini' admin)|
      grep -e '^<User '| grep -P -o -e '(?<=apikey=)([\w]+([-\w]+)*)'
    args:
      chdir: '{{ckan.pyenv_dir}}/src/ckan'
    register: grep_result

  # FIXME: Compute at the end of CKAN role
  - set_fact: 
      ckan_api_key: '{{grep_result.stdout}}'
  - set_fact:
      ckan_url: 'http://{{inventory_hostname}}'


- hosts: admin
  connection: local

  tasks:
  
  - set_fact:
      ckan_host: '{{groups["ckan"]| first}}'
  - set_fact: 
      api_key: '{{hostvars[ckan_host].ckan_api_key}}'
      api_url: '{{hostvars[ckan_host].ckan_url}}/api/action'

  - name: Find existing CKAN groups
    shell: >
      curl -X GET '{{api_url}}/group_list'| jq '.result'
    register: group_list_result
  
  - name: Find existing CKAN organizations
    shell: >
      curl -X GET '{{api_url}}/organization_list'| jq '.result'
    register: org_list_result

  - set_fact:
      existing_ckan_groups: '{{group_list_result.stdout}}'
      existing_ckan_orgs: '{{org_list_result.stdout}}'
 
  # Create topics (groups)
  
  - name: Export topics in JSON format suitable for CKAN API
    command: python export-groups-for-api.py topics.csv
    args:
      chdir: files/groups/ckan/initialize
    register: export_topics_result
 
  - name: Create CKAN topics (groups)
    shell: >
      curl -f -X POST '{{api_url}}/group_create' -d '@{{item.path}}' -H 'Content-Type: application/json' -H 'Authorization: {{api_key}}'
    with_items: export_topics_result.stdout
    when: item.name not in existing_ckan_groups
  
  # Create organizations
  
  - name: Export organizations in JSON format suitable for CKAN API
    command: python export-groups-for-api.py organizations.csv
    args:
      chdir: files/groups/ckan/initialize
    register: export_orgs_result
  
  - name: Create CKAN organizations
    shell: >
      curl -f -X POST '{{api_url}}/organization_create' -d '@{{item.path}}' -H 'Content-Type: application/json' -H 'Authorization: {{api_key}}'
    with_items: export_orgs_result.stdout
    when: item.name not in existing_ckan_orgs
  
  # Provide translations for topics/organizations
  
  - name: Export topic translations in JSON format suitable for CKAN API
    command: python export-groups-for-api.py --translate topics.csv
    args:
      chdir: files/groups/ckan/initialize
    register: export_topics_result
  
  - name: Export organization translations in JSON format suitable for CKAN API
    command: python export-groups-for-api.py --translate organizations.csv
    args:
      chdir: files/groups/ckan/initialize
    register: export_orgs_result
  
  - name: Provide translations for CKAN topics (groups)
    shell: >
      curl -f -X POST '{{api_url}}/term_translation_update_many' -d '@{{item.path}}' -H 'Content-Type: application/json' -H 'Authorization: {{api_key}}'
    with_flattened: 
    - export_topics_result.stdout
    - export_orgs_result.stdout


- hosts: ckan
  remote_user: root
  
  tasks:

  - name: Create root directory for groups/organizations uploads
    file: path={{ckan.files_dir}}/storage/uploads/group state=directory owner=ckaner group=ckaner
    
  - name: Upload images for topics/organizations
    copy: 
      src: 'files/groups/ckan/initialize/images/{{item}}/'
      dest: '{{ckan.files_dir}}/storage/uploads/group/{{item}}/'
      owner: ckaner 
      group: ckaner
    with_items: ['topics', 'organizations']
